{"version":3,"sources":["Kocka.js","BacanjeKockica.js","App.js","serviceWorker.js","index.js"],"names":["Kocka","react_default","a","createElement","className","concat","this","props","lice","mesanje","Component","BacanjeKockica","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bacanje","Novakocka1","strane","Math","floor","random","length","Novakocka2","setState","kocka1","kocka2","setTimeout","state","src_Kocka_0","onClick","disabled","defaultProps","App","src_BacanjeKockica_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAiBeA,0LAZX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KACEC,UAAS,qBAAAC,OAAuBC,KAAKC,MAAMC,KAAlC,KAAAH,OACPC,KAAKC,MAAME,QAAU,UAAY,cANzBC,cCCdC,qBAKJ,SAAAA,EAAYJ,GAAO,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMC,KAQRW,QAAU,WACR,IAAMC,EAAaP,EAAKL,MAAMa,OAC5BC,KAAKC,MAAMD,KAAKE,SAAWX,EAAKL,MAAMa,OAAOI,SAGzCC,EAAab,EAAKL,MAAMa,OAC5BC,KAAKC,MAAMD,KAAKE,SAAWX,EAAKL,MAAMa,OAAOI,SAG/CZ,EAAKc,SAAS,CACZC,OAAQR,EACRS,OAAQH,EACRP,SAAS,IAGXW,WAAW,WACTjB,EAAKc,SAAS,CACZR,SAAS,KAEV,MA1BHN,EAAKkB,MAAQ,CACXH,OAAQ,MACRC,OAAQ,MACRV,SAAS,GALMN,wEAgCjB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAOvB,KAAMF,KAAKwB,MAAMH,OAAQlB,QAASH,KAAKwB,MAAMZ,UACpDjB,EAAAC,EAAAC,cAAC4B,EAAD,CAAOvB,KAAMF,KAAKwB,MAAMF,OAAQnB,QAASH,KAAKwB,MAAMZ,WAEtDjB,EAAAC,EAAAC,cAAA,UAAQ6B,QAAS1B,KAAKY,QAASe,SAAU3B,KAAKwB,MAAMZ,SACjDZ,KAAKwB,MAAMZ,QAAU,cAAgB,0BA5CnBR,cAAvBC,EACGuB,aAAe,CACpBd,OAAQ,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,QAiDrCT,cC3CAwB,MARf,WACE,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7c56e895.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Kocka.css\";\r\n\r\nclass Kocka extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <i\r\n          className={`Kocka fas fa-dice-${this.props.lice} ${\r\n            this.props.mesanje ? \"shaking\" : \"\"\r\n          }`}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Kocka;\r\n","import React, { Component } from \"react\";\r\nimport Kocka from \"./Kocka\";\r\nimport \"./BacanjeKockica.css\";\r\n\r\nclass BacanjeKockica extends Component {\r\n  static defaultProps = {\r\n    strane: [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      kocka1: \"one\",\r\n      kocka2: \"one\",\r\n      bacanje: false\r\n    };\r\n  }\r\n\r\n  bacanje = () => {\r\n    const Novakocka1 = this.props.strane[\r\n      Math.floor(Math.random() * this.props.strane.length)\r\n    ];\r\n\r\n    const Novakocka2 = this.props.strane[\r\n      Math.floor(Math.random() * this.props.strane.length)\r\n    ];\r\n\r\n    this.setState({\r\n      kocka1: Novakocka1,\r\n      kocka2: Novakocka2,\r\n      bacanje: true\r\n    });\r\n    // cekati 1s , zatim podesiti bacanje na false\r\n    setTimeout(() => {\r\n      this.setState({\r\n        bacanje: false\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wraper\">\r\n        <div className=\"container\">\r\n          <Kocka lice={this.state.kocka1} mesanje={this.state.bacanje} />\r\n          <Kocka lice={this.state.kocka2} mesanje={this.state.bacanje} />\r\n        </div>\r\n        <button onClick={this.bacanje} disabled={this.state.bacanje}>\r\n          {this.state.bacanje ? \"Bacanje....\" : \"Baci kockice!!\"}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BacanjeKockica;\r\n","import React from \"react\";\nimport BacanjeKockica from \"./BacanjeKockica\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BacanjeKockica />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}